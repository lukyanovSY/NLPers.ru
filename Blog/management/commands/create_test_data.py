from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from Blog.models import Category, Post, UserProfile, Comment
from django.utils import timezone
import random


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–≥–∞'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–≥–∞...'))
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            {
                'name': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'slug': 'programming',
                'description': '–°—Ç–∞—Ç—å–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è'
            },
            {
                'name': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                'slug': 'ai',
                'description': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é, –Ω–µ–π—Ä–æ–Ω–Ω—ã–º —Å–µ—Ç—è–º –∏ –ò–ò'
            },
            {
                'name': '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                'slug': 'web-development',
                'description': '–§—Ä–æ–Ω—Ç–µ–Ω–¥, –±—ç–∫–µ–Ω–¥ –∏ –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
            },
            {
                'name': 'Data Science',
                'slug': 'data-science',
                'description': '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—É–∫–∞ –æ –¥–∞–Ω–Ω—ã—Ö'
            },
            {
                'name': 'Python',
                'slug': 'python',
                'description': '–í—Å—ë –æ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python'
            },
            {
                'name': '–¢—É—Ç–æ—Ä–∏–∞–ª—ã',
                'slug': 'tutorials',
                'description': '–ü–æ—à–∞–≥–æ–≤—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
            }
        ]
        
        categories = []
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                slug=cat_data['slug'],
                defaults=cat_data
            )
            categories.append(category)
            if created:
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {
                'username': 'ivan_petrov',
                'email': 'ivan@example.com',
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–ü–µ—Ç—Ä–æ–≤',
                'bio': 'Senior Python Developer —Å 7-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Django, FastAPI –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏. –õ—é–±–ª—é –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –Ω–∞—á–∏–Ω–∞—é—â–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.',
                'location': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
            },
            {
                'username': 'maria_data',
                'email': 'maria@example.com',
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
                'bio': 'Data Scientist –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±–ª–∞—Å—Ç–∏ NLP. PhD –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫. –†–∞–±–æ—Ç–∞—é —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ–∑–¥–∞—é ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞.',
                'location': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è'
            },
            {
                'username': 'alex_fullstack',
                'email': 'alex@example.com',
                'first_name': '–ê–ª–µ–∫—Å–µ–π',
                'last_name': '–ö–æ–∑–ª–æ–≤',
                'bio': 'Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –°–æ–∑–¥–∞—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ React + Django. –£–≤–ª–µ–∫–∞—é—Å—å DevOps –∏ –æ–±–ª–∞—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.',
                'location': '–ö–∞–∑–∞–Ω—å, –†–æ—Å—Å–∏—è'
            }
        ]
        
        users = []
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'is_active': True
                }
            )
            if created:
                user.set_password('demo123')
                user.save()
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile, profile_created = UserProfile.objects.get_or_create(
                user=user,
                defaults={
                    'bio': user_data['bio'],
                    'location': user_data['location'],
                    'is_verified': True
                }
            )
            users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        posts_data = [
            {
                'title': '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ Django: –û—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞',
                'content': '''
                <h2>üöÄ –í–≤–µ–¥–µ–Ω–∏–µ –≤ Django</h2>
                <p>Django - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Python, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í —ç—Ç–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ –º—ã –∏–∑—É—á–∏–º Django –æ—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.</p>
                
                <h3>üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</h3>
                <p>–ù–∞—á–Ω–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Django:</p>
                <pre><code class="language-bash">pip install django
django-admin startproject myproject
cd myproject
python manage.py runserver</code></pre>
                
                <h3>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Django</h3>
                <p>Django —Å–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É MTV (Model-Template-View):</p>
                <ul>
                    <li><strong>Model</strong> - —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞</li>
                    <li><strong>Template</strong> - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</li>
                    <li><strong>View</strong> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</li>
                </ul>
                
                <h3>üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3>
                <pre><code class="language-python">from django.db import models

class Article(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.title</code></pre>
        
                <p>Django - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º DRY (Don't Repeat Yourself) –∏ convention over configuration, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ.</p>
                ''',
                'excerpt': '–ò–∑—É—á–∞–µ–º Django —Å –Ω—É–ª—è: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ views. –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.',
                'tags': 'Django, Python, –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, Backend, Framework',
                'category_index': 0,  # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                'reading_time': 15
            },
            {
                'title': '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å Python: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                'content': '''
                <h2>ü§ñ –í–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</h2>
                <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –∏ –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è.</p>
                
                <h3>üìö –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</h3>
                <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å ML –≤ Python –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:</p>
                <ul>
                    <li><strong>NumPy</strong> - —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
                    <li><strong>Pandas</strong> - –∞–Ω–∞–ª–∏–∑ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</li>
                    <li><strong>Scikit-learn</strong> - –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</li>
                    <li><strong>Matplotlib/Seaborn</strong> - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</li>
                </ul>
                
                <h3>üîÑ –ü—Ä–æ—Ü–µ—Å—Å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
                <pre><code class="language-python">import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data = pd.read_csv('dataset.csv')

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = data.drop('target', axis=1)
y = data['target']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∞
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print(f'–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.2%}')</code></pre>

                <h3>üìä –¢–∏–ø—ã –∑–∞–¥–∞—á –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</h3>
                <p>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:</p>
                <ul>
                    <li><strong>–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</strong> - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
                    <li><strong>–†–µ–≥—Ä–µ—Å—Å–∏—è</strong> - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è</li>
                    <li><strong>–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è</strong> - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤</li>
                </ul>
                
                <p>–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.</p>
                ''',
                'excerpt': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å Python. –ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–µ ML-–º–æ–¥–µ–ª–∏.',
                'tags': 'Machine Learning, Python, AI, Scikit-learn, Data Science',
                'category_index': 1,  # –ò–ò
                'reading_time': 20
            },
            {
                'title': 'React + Django: –°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                'content': '''
                <h2>‚öõÔ∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</h2>
                <p>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è React –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ –∏ Django REST Framework –Ω–∞ –±—ç–∫–µ–Ω–¥–µ - –º–æ—â–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.</p>
                
                <h3>üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django REST API</h3>
                <p>–ù–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è API –Ω–∞ Django:</p>
                <pre><code class="language-python"># settings.py
INSTALLED_APPS = [
    'rest_framework',
    'corsheaders',
    # –≤–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    # –¥—Ä—É–≥–∏–µ middleware
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}</code></pre>

                <h3>üì° –°–æ–∑–¥–∞–Ω–∏–µ API endpoints</h3>
                <pre><code class="language-python"># serializers.py
from rest_framework import serializers
from .models import Post

class PostSerializer(serializers.ModelSerializer):
    author_name = serializers.CharField(source='author.get_full_name', read_only=True)
    
    class Meta:
        model = Post
        fields = ['id', 'title', 'content', 'excerpt', 'author_name', 'created_at']

# views.py
from rest_framework import viewsets
from rest_framework.decorators import action
from rest_framework.response import Response

class PostViewSet(viewsets.ModelViewSet):
    queryset = Post.objects.filter(status='published')
    serializer_class = PostSerializer
    
    @action(detail=False, methods=['get'])
    def featured(self, request):
        featured_posts = self.queryset.filter(is_featured=True)[:3]
        serializer = self.get_serializer(featured_posts, many=True)
        return Response(serializer.data)</code></pre>

                <h3>‚öõÔ∏è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h3>
                <pre><code class="language-jsx">// PostList.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const PostList = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await axios.get('/api/posts/');
        setPosts(response.data.results);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="post-list">
      {posts.map(post => (
        <div key={post.id} className="post-card">
          <h3>{post.title}</h3>
          <p>{post.excerpt}</p>
          <small>–ê–≤—Ç–æ—Ä: {post.author_name}</small>
        </div>
      ))}
    </div>
  );
};

export default PostList;</code></pre>

                <p>–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞.</p>
                ''',
                'excerpt': '–°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ SPA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è React –∏ Django REST Framework. API, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.',
                'tags': 'React, Django, REST API, SPA, JavaScript, Full-stack',
                'category_index': 2,  # –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
                'reading_time': 25
            },
            {
                'title': '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å Pandas: –û—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏',
                'content': '''
                <h2>üìä Pandas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                <p>Pandas - —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Python. –û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.</p>
                
                <h3>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</h3>
                <pre><code class="language-python">import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
df_csv = pd.read_csv('data.csv')
df_excel = pd.read_excel('data.xlsx')
df_json = pd.read_json('data.json')

# –ü–µ—Ä–≤–∏—á–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
print(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape}")
print(f"\\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
print(df.info())
print(f"\\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
print(df.head())
print(f"\\n–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
print(df.describe())</code></pre>

                <h3>üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
                <pre><code class="language-python"># –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
missing_data = df.isnull().sum()
print("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", missing_data[missing_data > 0])

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
df['column'].fillna(df['column'].mean(), inplace=True)

# –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
df.drop_duplicates(inplace=True)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
df['date_column'] = pd.to_datetime(df['date_column'])
df['category'] = df['category'].astype('category')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df['year'] = df['date_column'].dt.year
df['month'] = df['date_column'].dt.month</code></pre>

                <h3>üîç –ê–Ω–∞–ª–∏–∑ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞</h3>
                <pre><code class="language-python"># –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
grouped = df.groupby('category').agg({
    'sales': ['sum', 'mean', 'count'],
    'profit': ['sum', 'mean']
})

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
high_sales = df[df['sales'] > df['sales'].quantile(0.9)]

# –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
pivot_table = df.pivot_table(
    values='sales',
    index='category',
    columns='region',
    aggfunc='sum'
)

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
correlation_matrix = df.select_dtypes(include=[np.number]).corr()
print(correlation_matrix)</code></pre>

                <h3>üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h3>
                <pre><code class="language-python"># –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
df['sales'].hist(bins=30, ax=axes[0,0])
axes[0,0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂')

# –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
axes[0,1].scatter(df['advertising'], df['sales'])
axes[0,1].set_xlabel('–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É')
axes[0,1].set_ylabel('–ü—Ä–æ–¥–∞–∂–∏')

# –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
sns.heatmap(correlation_matrix, annot=True, ax=axes[1,0])
axes[1,0].set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')

# –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
df.groupby('date')['sales'].sum().plot(ax=axes[1,1])
axes[1,1].set_title('–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')

plt.tight_layout()
plt.show()</code></pre>

                <p>Pandas –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.</p>
                ''',
                'excerpt': '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö —Å Pandas: –∑–∞–≥—Ä—É–∑–∫–∞, –æ—á–∏—Å—Ç–∫–∞, –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã.',
                'tags': 'Pandas, Data Science, Python, –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
                'category_index': 3,  # Data Science
                'reading_time': 18
            },
            {
                'title': 'Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                'content': '''
                <h2>üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Python!</h2>
                <p>Python - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ï–≥–æ –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –º–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞—é—Ç –µ–≥–æ –∏–¥–µ–∞–ª—å–Ω—ã–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.</p>
                
                <h3>üöÄ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏</h3>
                <pre><code class="language-python"># –í–∞—à–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
print("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
name = "–ê–Ω–Ω–∞"           # —Å—Ç—Ä–æ–∫–∞
age = 25               # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
height = 165.5         # —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
is_student = True      # –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
print(f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}, –º–Ω–µ {age} –ª–µ—Ç")
print(f"–ú–æ–π —Ä–æ—Å—Ç: {height} —Å–º")</code></pre>

                <h3>üìù –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
                <pre><code class="language-python"># –°–ø–∏—Å–∫–∏ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
fruits = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω"]
fruits.append("–≥—Ä—É—à–∞")
print(f"–§—Ä—É–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(fruits)}")

# –°–ª–æ–≤–∞—Ä–∏ - –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
person = {
    "name": "–ò–≤–∞–Ω",
    "age": 30,
    "city": "–ú–æ—Å–∫–≤–∞"
}
print(f"–í–æ–∑—Ä–∞—Å—Ç: {person['age']}")

# –ú–Ω–æ–∂–µ—Å—Ç–≤–∞ - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
numbers = {1, 2, 3, 3, 4, 5}
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞: {numbers}")</code></pre>

                <h3>üîÑ –¶–∏–∫–ª—ã –∏ —É—Å–ª–æ–≤–∏—è</h3>
                <pre><code class="language-python"># –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
temperature = 25

if temperature > 30:
    print("–ñ–∞—Ä–∫–æ!")
elif temperature > 20:
    print("–¢–µ–ø–ª–æ")
else:
    print("–•–æ–ª–æ–¥–Ω–æ")

# –¶–∏–∫–ª for
for fruit in fruits:
    print(f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {fruit}")

# –¶–∏–∫–ª while
count = 0
while count < 3:
    print(f"–°—á–µ—Ç: {count}")
    count += 1

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
squares = [x**2 for x in range(1, 6)]
print(f"–ö–≤–∞–¥—Ä–∞—Ç—ã: {squares}")</code></pre>

                <h3>üîß –§—É–Ω–∫—Ü–∏–∏</h3>
                <pre><code class="language-python"># –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def greet(name, greeting="–ü—Ä–∏–≤–µ—Ç"):
    return f"{greeting}, {name}!"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
message = greet("–ú–∞—Ä–∏—è")
print(message)

# –§—É–Ω–∫—Ü–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def calculate_area(length, width):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
    area = length * width
    return area

rectangle_area = calculate_area(10, 5)
print(f"–ü–ª–æ—â–∞–¥—å: {rectangle_area} –∫–≤.–º")</code></pre>

                <h3>üìö –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏</h3>
                <pre><code class="language-python"># –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
try:
    with open('data.txt', 'r', encoding='utf-8') as file:
        content = file.read()
        print(content)
except FileNotFoundError:
    print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
data = ["—Å—Ç—Ä–æ–∫–∞ 1", "—Å—Ç—Ä–æ–∫–∞ 2", "—Å—Ç—Ä–æ–∫–∞ 3"]
with open('output.txt', 'w', encoding='utf-8') as file:
    for line in data:
        file.write(line + '\\n')</code></pre>

                <p>Python - —ç—Ç–æ –ª–∏—à—å –Ω–∞—á–∞–ª–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑—É—á–∞–π—Ç–µ, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ!</p>
                ''',
                'excerpt': '–ò–∑—É—á–∞–µ–º –æ—Å–Ω–æ–≤—ã Python: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ü–∏–∫–ª—ã, —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤.',
                'tags': 'Python, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –û—Å–Ω–æ–≤—ã, –¢—É—Ç–æ—Ä–∏–∞–ª, –ù–∞—á–∏–Ω–∞—é—â–∏–º',
                'category_index': 4,  # Python
                'reading_time': 12
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã
        for i, post_data in enumerate(posts_data):
            author = users[i % len(users)]
            category = categories[post_data['category_index']]
            
            post, created = Post.objects.get_or_create(
                title=post_data['title'],
                defaults={
                    'content': post_data['content'],
                    'excerpt': post_data['excerpt'],
                    'tags': post_data['tags'],
                    'author': author,
                    'category': category,
                    'slug': post_data['title'].lower().replace(' ', '-').replace(':', '').replace(',', '').replace('(', '').replace(')', ''),
                    'status': 'published',
                    'published_at': timezone.now() - timezone.timedelta(days=random.randint(1, 30)),
                    'views_count': random.randint(50, 1500),
                    'likes_count': random.randint(5, 100),
                    'reading_time': post_data['reading_time'],
                    'is_featured': i < 3,  # –ü–µ—Ä–≤—ã–µ 3 –ø–æ—Å—Ç–∞ –¥–µ–ª–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏
                    'allow_comments': True
                }
            )
            if created:
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {post.title[:50]}...')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        posts = Post.objects.filter(status='published')
        comments_texts = [
            "–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Å–ø–∞—Å–∏–±–æ –∞–≤—Ç–æ—Ä—É!",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–∞–∑–¥–µ–ª –ø—Ä–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.",
            "–•–æ—Ä–æ—à–æ –Ω–∞–ø–∏—Å–∞–Ω–æ, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—Å—ë —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–æ.",
            "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –ë—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–≥–∞–º.",
            "–û—á–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, –∂–¥—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!",
            "–ü–æ–ª–µ–∑–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –∏–∑–ª–æ–∂–µ–Ω–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∑–∞–∫–ª–∞–¥–∫–∏.",
            "–û—Ç–ª–∏—á–Ω—ã–π —Ç—É—Ç–æ—Ä–∏–∞–ª! –ü–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å –º–æ—é –ø—Ä–æ–±–ª–µ–º—É.",
            "–•–æ—Ä–æ—à–∏–π –æ–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç—Ä—É–¥!",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏."
        ]
        
        for post in posts:
            # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç 2 –¥–æ 8
            num_comments = random.randint(2, 8)
            for j in range(num_comments):
                comment_author = users[j % len(users)]
                if comment_author != post.author:  # –ù–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å–≤–æ–∏ –ø–æ—Å—Ç—ã
                    Comment.objects.create(
                        post=post,
                        author=comment_author,
                        content=random.choice(comments_texts),
                        likes_count=random.randint(0, 20),
                        created_at=timezone.now() - timezone.timedelta(hours=random.randint(1, 168))  # –î–æ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
                    )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–∞—Ö
        for post in posts:
            post.comments_count = post.comments.count()
            post.save(update_fields=['comments_count'])
        
        self.stdout.write(
            self.style.SUCCESS('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üìÅ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üë• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üìù –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {posts.count()}')
        )
        self.stdout.write(
            self.style.SUCCESS(f'üí¨ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {Comment.objects.count()}')
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
        self.stdout.write(
            self.style.WARNING('\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:')
        )
        for user_data in users_data:
            self.stdout.write(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} | –ü–∞—Ä–æ–ª—å: demo123"
            )