from django.core.management.base import BaseCommand
from django.db import transaction


class Command(BaseCommand):
    help = '–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ slug –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ slug, –≤–∫–ª—é—á–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ',
        )
        parser.add_argument(
            '--categories-only',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        )
        parser.add_argument(
            '--posts-only',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        )

    def handle(self, *args, **options):
        try:
            from Blog.models import Category, Post
            from Blog.utils import create_unique_slug
        except ImportError:
            self.stdout.write(self.style.ERROR('‚ùå –ú–æ–¥–µ–ª–∏ –±–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'))
            return

        self.stdout.write(self.style.SUCCESS('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ slug-–æ–≤...'))
        
        force = options['force']
        categories_only = options['categories_only']
        posts_only = options['posts_only']
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üìã –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'))

        updated_categories = 0
        updated_posts = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not posts_only:
            self.stdout.write(self.style.SUCCESS('\nüìÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...'))
            
            categories = Category.objects.all()
            for category in categories:
                old_slug = category.slug
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π slug
                new_slug = create_unique_slug(
                    category.name, 
                    Category, 
                    instance=category,
                    fallback_prefix='category'
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
                needs_update = force or not old_slug or old_slug != new_slug or not self.is_latin_slug(old_slug)
                
                if needs_update:
                    if dry_run:
                        self.stdout.write(
                            f'  üìù {category.name}: "{old_slug}" ‚Üí "{new_slug}"'
                        )
                    else:
                        try:
                            with transaction.atomic():
                                category.slug = new_slug
                                category.save(update_fields=['slug'])
                                self.stdout.write(
                                    self.style.SUCCESS(f'  ‚úÖ {category.name}: "{old_slug}" ‚Üí "{new_slug}"')
                                )
                                updated_categories += 1
                        except Exception as e:
                            self.stdout.write(
                                self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {category.name}: {e}')
                            )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'  ‚è≠Ô∏è {category.name}: slug —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')
                    )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
        if not categories_only:
            self.stdout.write(self.style.SUCCESS('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...'))
            
            posts = Post.objects.all()
            for post in posts:
                old_slug = post.slug
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π slug
                new_slug = create_unique_slug(
                    post.title, 
                    Post, 
                    instance=post,
                    fallback_prefix='post'
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
                needs_update = force or not old_slug or old_slug != new_slug or not self.is_latin_slug(old_slug)
                
                if needs_update:
                    if dry_run:
                        self.stdout.write(
                            f'  üìù {post.title}: "{old_slug}" ‚Üí "{new_slug}"'
                        )
                    else:
                        try:
                            with transaction.atomic():
                                post.slug = new_slug
                                post.save(update_fields=['slug'])
                                self.stdout.write(
                                    self.style.SUCCESS(f'  ‚úÖ {post.title}: "{old_slug}" ‚Üí "{new_slug}"')
                                )
                                updated_posts += 1
                        except Exception as e:
                            self.stdout.write(
                                self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {post.title}: {e}')
                            )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'  ‚è≠Ô∏è {post.title}: slug —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')
                    )

        # –ò—Ç–æ–≥–∏
        self.stdout.write(self.style.SUCCESS('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
        
        if not dry_run:
            self.stdout.write(self.style.SUCCESS(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'))
            if not posts_only:
                self.stdout.write(self.style.SUCCESS(f'   üìÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated_categories}'))
            if not categories_only:
                self.stdout.write(self.style.SUCCESS(f'   üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {updated_posts}'))
        else:
            self.stdout.write(self.style.WARNING('üí° –î–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run'))

        self.stdout.write(self.style.SUCCESS('\nüîó –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö slug:'))
        self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤'))
        self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö slug'))
        self.stdout.write(self.style.SUCCESS('   ‚Ä¢ SEO-–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ URL'))
        self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –ß–∏—Ç–∞–µ–º—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ'))

    def is_latin_slug(self, slug):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ slug —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã"""
        import re
        return bool(re.match(r'^[a-zA-Z0-9-]+$', slug)) if slug else False