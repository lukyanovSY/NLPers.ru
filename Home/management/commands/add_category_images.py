from django.core.management.base import BaseCommand
from django.core.files.base import ContentFile
from PIL import Image, ImageDraw, ImageFont
import io
import os


class Command(BaseCommand):
    help = '–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –±–ª–æ–≥–∞'

    def handle(self, *args, **options):
        try:
            from Blog.models import Category
        except ImportError:
            self.stdout.write(self.style.ERROR('‚ùå –ú–æ–¥–µ–ª—å Category –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
            return

        self.stdout.write(self.style.SUCCESS('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π...'))

        # –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_settings = {
            'Python': {
                'background_color': '#3776ab',
                'text_color': '#ffffff',
                'icon': 'üêç'
            },
            'Django': {
                'background_color': '#092e20',
                'text_color': '#ffffff',
                'icon': 'üåü'
            },
            'Machine Learning': {
                'background_color': '#ff6b6b',
                'text_color': '#ffffff',
                'icon': 'ü§ñ'
            },
            'NLP': {
                'background_color': '#4ecdc4',
                'text_color': '#ffffff',
                'icon': 'üìù'
            },
            '–ù–æ–≤–æ—Å—Ç–∏': {
                'background_color': '#45b7d1',
                'text_color': '#ffffff',
                'icon': 'üì∞'
            },
            '–û–±—É—á–µ–Ω–∏–µ': {
                'background_color': '#96ceb4',
                'text_color': '#ffffff',
                'icon': 'üìö'
            }
        }

        updated_count = 0
        
        for category in Category.objects.all():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if category.image:
                self.stdout.write(self.style.WARNING(f'‚è≠Ô∏è –£ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}" —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'))
                continue

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            settings = category_settings.get(category.name, {
                'background_color': category.color or '#007bff',
                'text_color': '#ffffff',
                'icon': 'üìÅ'
            })

            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                image = self.create_category_image(
                    category.name,
                    settings['background_color'],
                    settings['text_color'],
                    settings['icon']
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_io = io.BytesIO()
                image.save(image_io, format='PNG', quality=95)
                image_file = ContentFile(image_io.getvalue())

                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"{category.slug}_category.png"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–æ–¥–µ–ª—å
                category.image.save(filename, image_file, save=False)
                category.save()

                self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category.name}"'))
                updated_count += 1

            except Exception as e:
                self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "{category.name}": {e}'))

        self.stdout.write(self.style.SUCCESS(''))
        self.stdout.write(self.style.SUCCESS(f'üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'))
        self.stdout.write(self.style.SUCCESS(f'üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {updated_count}'))
        
        if updated_count > 0:
            self.stdout.write(self.style.SUCCESS(''))
            self.stdout.write(self.style.SUCCESS('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'))
            self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'))
            self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'))
            self.stdout.write(self.style.SUCCESS('   ‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 400x300px –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞'))

    def create_category_image(self, text, bg_color, text_color, icon):
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = 400, 300
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        image = Image.new('RGB', (width, height), bg_color)
        draw = ImageDraw.Draw(image)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        for y in range(height):
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –±–æ–ª–µ–µ —Ç–µ–º–Ω–æ–≥–æ —Å–≤–µ—Ä—Ö—É –∫ –±–æ–ª–µ–µ —Å–≤–µ—Ç–ª–æ–º—É —Å–Ω–∏–∑—É
            alpha = y / height
            r, g, b = self.hex_to_rgb(bg_color)
            new_r = int(r + (255 - r) * alpha * 0.2)
            new_g = int(g + (255 - g) * alpha * 0.2)
            new_b = int(b + (255 - b) * alpha * 0.2)
            
            color = (min(255, new_r), min(255, new_g), min(255, new_b))
            draw.line([(0, y), (width, y)], fill=color)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç
        try:
            # –î–ª—è –∏–∫–æ–Ω–∫–∏
            icon_font = ImageFont.truetype("arial.ttf", 60)
            text_font = ImageFont.truetype("arial.ttf", 32)
        except:
            try:
                icon_font = ImageFont.load_default()
                text_font = ImageFont.load_default()
            except:
                icon_font = None
                text_font = None
        
        # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É
        icon_bbox = draw.textbbox((0, 0), icon, font=icon_font)
        icon_width = icon_bbox[2] - icon_bbox[0]
        icon_height = icon_bbox[3] - icon_bbox[1]
        icon_x = (width - icon_width) // 2
        icon_y = height // 2 - 40
        
        draw.text((icon_x, icon_y), icon, fill=text_color, font=icon_font)
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        if len(text) > 15:
            text = text[:12] + "..."
        
        text_bbox = draw.textbbox((0, 0), text, font=text_font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        text_x = (width - text_width) // 2
        text_y = height // 2 + 20
        
        draw.text((text_x, text_y), text, fill=text_color, font=text_font)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
        draw.rectangle([(0, 0), (width-1, height-1)], outline=text_color, width=3)
        
        return image
    
    def hex_to_rgb(self, hex_color):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ RGB"""
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))